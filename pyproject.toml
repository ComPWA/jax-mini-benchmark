[build-system]
build-backend = "setuptools.build_meta"
requires = [
    "setuptools-scm[toml]>=6.2",
    "setuptools>=45",
]

[project]
authors = [
    {name = "Common Partial Wave Analysis", email = "compwa-admin@ep1.rub.de"},
]
dependencies = [
    "PyYAML",
    "jax",
    "jaxlib",
    "matplotlib",
    "py-cpuinfo",
    "tqdm",
]
description = "Set of commands for benchmarking JAX on your machine"
dynamic = ["version"]
keywords = [
    "HEP",
    "PWA",
    "amplitude analysis",
    "partial wave analysis",
    "particle physics",
    "physics",
    "tensorflow",
]
license = {file = "LICENSE"}
maintainers = [
    {name = "Common Partial Wave Analysis", email = "compwa-admin@ep1.rub.de"},
]
name = "jax-mini-benchmark"
requires-python = ">=3.12"

[project.readme]
content-type = "text/markdown"
file = "README.md"

[project.scripts]
benchmark-jax = "jax_benchmark:main"
benchmark-jax-dot-product = "jax_benchmark.dot_product:main"

[project.urls]
Documentation = "https://github.com/ComPWA/jax-mini-benchmark"
Source = "https://github.com/ComPWA/jax-mini-benchmark"
Tracker = "https://github.com/ComPWA/jax-mini-benchmark/issues"

[dependency-groups]
dev = [
    "ruff",
    {include-group = "jupyter"},
]
jupyter = [
    "jupyterlab",
    "jupyterlab-code-formatter",
    "jupyterlab-git",
    "jupyterlab-lsp",
    "jupyterlab-myst",
    "python-lsp-ruff",
    "python-lsp-server[rope]",
]

[tool.setuptools.package-data]
jax_benchmark = ["py.typed"]

[tool.setuptools.packages.find]
where = ["src"]

[tool.setuptools_scm]
local_scheme = "no-local-version"
version_scheme = "only-version"
write_to = "src/jax_benchmark/_version.py"

[tool.pyright]
exclude = [
    "**/*.egg-info",
    "**/.git",
    "**/.ipynb_checkpoints",
    "**/.mypy_cache",
    "**/.pytest_cache",
    "**/.tox",
    "**/.venv/",
    "**/__pycache__",
    "**/_build",
    ".ruff_cache/**",
]
reportGeneralTypeIssues = false
reportMissingTypeArgument = false
reportMissingTypeStubs = false
reportUnknownArgumentType = false
reportUnknownMemberType = false
reportUnknownParameterType = false
reportUnknownVariableType = false
typeCheckingMode = "strict"

[tool.ruff]
extend-include = ["*.ipynb"]
preview = true
show-fixes = true
src = ["src"]

[tool.ruff.format]
docstring-code-format = true
line-ending = "lf"

[tool.ruff.lint]
ignore = [
    "ANN401",
    "COM812",
    "CPY001",
    "D100",
    "D101",
    "D102",
    "D103",
    "D104",
    "D105",
    "D107",
    "D203",
    "D213",
    "D407",
    "D416",
    "DOC",
    "E501",
    "FBT00",
    "FURB101",
    "FURB103",
    "FURB140",
    "G004",
    "ISC001",
    "PLC0415",
    "PLW1514",
    "PT001",
    "PTH",
    "S404",
    "S602",
    "SIM108",
    "T201",
]
select = ["ALL"]
task-tags = ["cspell"]

[tool.ruff.lint.flake8-builtins]
builtins-allowed-modules = ["io"]
builtins-ignorelist = ["display"]

[tool.ruff.lint.flake8-comprehensions]
allow-dict-calls-with-keyword-arguments = true

[tool.ruff.lint.isort]
split-on-trailing-comma = false

[tool.ruff.lint.per-file-ignores]
"*.ipynb" = [
    "ANN",
    "B018",
    "C90",
    "D",
    "E303",
    "E703",
    "N806",
    "N816",
    "PD901",
    "PLR09",
    "PLR2004",
    "PLW0602",
    "PLW0603",
    "S101",
    "T20",
    "TC00",
]
"visualize-benchmark.ipynb" = ["S301", "S403", "W391"]

[tool.ruff.lint.pydocstyle]
convention = "google"

[tool.tomlsort]
all = false
ignore_case = true
in_place = true
sort_first = [
    "build-system",
    "project",
    "tool.setuptools",
    "tool.setuptools_scm",
]
spaces_indent_inline_array = 4
trailing_comma_inline_array = true
